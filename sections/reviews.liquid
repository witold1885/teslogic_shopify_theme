<link rel="stylesheet" type="text/css" href="{{ 'reviews.css' | asset_url }}">
<link rel="stylesheet" type="text/css" href="{{ 'reviews-responsive.css' | asset_url }}">

{% style %}	
.reviews {
/*	background: url({{ 'reviews_bg.png' | asset_url }}), -666.816px -1673.512px / 296.268% 182.468% no-repeat, linear-gradient(180deg, #403CF7 -7.9%, #403CF7 129.81%);*/
	background: url({{ 'reviews_bg.png' | asset_url }}), linear-gradient(180deg, #403CF7 -7.9%, #403CF7 129.81%);
	background-size: cover;
	background-position: center;
}
.spr-starrating .spr-icon-star::before {
	content: url({{ 'star-big-filled.svg' | asset_url }});
}
.spr-starrating .spr-icon-star-empty::before {
	content: url({{ 'star-big-outlined.svg' | asset_url }});
}
.spr-starrating .spr-icon-star-hover::before {
	content: url({{ 'star-big-filled.svg' | asset_url }});
}
{% endstyle %}

<!-- <div id="multipleReviews"></div> -->
<div id="reviewsWrap" class="reviews">
	<div class="reviews-wrap">
		<div class="reviews-top">
			<div class="reviews-top-left">
				<div class="reviews-top-supinfo">
					<div class="reviews-top-supinfo-stars" id="totalRatingStars"></div>
					<div class="reviews-top-supinfo-text">Teslogic Reviews</div>					
				</div>
				<div class="reviews-title">
					Positive feedback from clients â€” <br>
					one of our main tasks
				</div>
			</div>
			<div class="reviews-top-right">
				<div class="reviews-rating-overall-title">Overall rating</div>
				<div class="reviews-rating-overall-data">
					<div id="totalRatingValue" class="reviews-rating-overall-data-value"></div>
					<div class="reviews-rating-overall-data-star">
						<img src="{{ 'star.svg' | asset_url }}" />
					</div>	
				</div>
				<div id="totalReviewsCount" class="reviews-rating-stats-total"></div>
			</div>
			
		</div>
		<div class="reviews-list" id="multipleReviews"></div>
	</div>
</div>

<div class="reviews-form-shadow">
	<div id="reviewsFormWrap" class="reviews-form-wrap">
		<img class="reviews-form-close" src="{{ 'close-grey.png' | asset_url }}">
		<form class="reviews-form">
			
		</form>
	</div>
</div>

{% assign product1 = all_products['teslogic-transmitter-kit'] %}
{% assign product2 = all_products['teslogic-transmitter-kit-v2'] %}
<script>
(function() {
  window.reviewApp = window.reviewApp || {
    debug: false,
    reviews: [],
    reviewUrl: 'https://productreviews.shopifycdn.com/proxy/v4/reviews/',
    reviewStore: {{ shop.permanent_domain | json }},
    /* or hard code the myshopify url - eg: freakdesign.myshopify.com */
  };
  window.reviewApp.translations = {
    'missing_id': 'Product ID array not defined',
    'script_exists': 'The script has already been loaded on the page'
  };
  window.reviewApp.productIdList = [ {{- product1.id -}}, {{ product2.id }} ];
  reviewApp.errLog = function(t) {
    if (!reviewApp.debug) return
    console.warn(reviewApp.translations[t])
  };
  var getBadges = function(a) {
    if (typeof a === 'undefined') {
      errLog('missing_id');
      return
    }
    if (!!document.getElementById('reviewBadges')) {
      errLog('script_exists');
      return
    }
    window.badgesLoaded = function(a) {
      console.log(a);
    };
    var idString = [];
    for (var i = a.length - 1; i >= 0; i--) {
      idString.push('&product_ids[]=' + a[i]);
    };
    var script = document.createElement("script");
    script.id = "reviewBadges";
    script.async = true;
    script.src = [window.reviewApp.reviewUrl, 'badges?callback=badgesLoaded&shop=', window.reviewApp.reviewStore, idString.join('')].join('');
    document.body.appendChild(script);
  };
  window.newReviewRating = 0;
	var totalData = [];
	var p = 1;
	var r = 0;
	totalData[p] = [];
  window.reviewLoaded = function(a) {
    window.reviewApp.reviews.push(a);
    if (window.reviewApp.productIdList.length) {
      reviewApp.getReviews(window.reviewApp.productIdList);
      return;
    };
		var formLoaded = false;
		var reviewCount = 0;
		var sumRatings = 0;
		let ratingMarks = { mark5: 0, mark4: 0, mark3: 0, mark2: 0, mark1: 0 };
    for (var i = window.reviewApp.reviews.length - 1; i >= 0; i--) {
      var tmpDiv = document.createElement('div');
      tmpDiv.innerHTML = window.reviewApp.reviews[i].reviews;
      var reviewText = tmpDiv.querySelectorAll('.spr-review-content');
      var reviewer = tmpDiv.querySelectorAll('.spr-review-header-byline');
      var title = tmpDiv.querySelectorAll('.spr-review-header-title');
      var rating = tmpDiv.querySelectorAll('.spr-starratings');
      // console.log(window.reviewApp.reviews[i].reviews, reviewText.length);
      for (var _i = 0; _i < reviewText.length; _i++) {
        let reviewerArray = reviewer[_i].innerText.split('on')
        let reviewAuthor = reviewerArray[0].trim()
        let reviewDate = reviewerArray[1].trim()
        let reviewHtml = `
        	<div class="reviews-list-item product-review" id="review-${i}-${_i}">
        		<div class="reviews-list-item-top">
	        		<div class="reviews-list-item-top-left">
	        			<div class="reviews-list-item-author">${reviewAuthor}</div>
	        			<div class="reviews-list-item-stars product-review-stars">${rating[_i].innerHTML}</div>
	        		</div>
        			<div class="reviews-list-item-date">${reviewDate}</div>
        		</div>
        		<div class="reviews-list-item-text product-review-text">${reviewText[_i].innerText}</div>
        	</div>
        `
        document.getElementById('multipleReviews').insertAdjacentHTML('beforeend', reviewHtml);

				if (r != 0 && r % 5 == 0) {
					p++;
					totalData[p] = [];
				}
				totalData[p].push(reviewHtml);
        r++;

        let ratingMark = rating[_i].getAttribute('aria-label').split(' ')[0];
		    ratingMarks[`mark${ratingMark}`]++;
      };

      var reviewsContainer = document.getElementById('multipleReviews');
			var reviewItems = document.querySelectorAll('.reviews-list-item');

			var column1Height = 0;
			var column2Height = 0;
			var rowGap = 24;
			var padding = 40;

			reviewItems.forEach(function(item, index) {
			  var itemHeight = item.offsetHeight;

			  if (column1Height <= column2Height) {
			    column1Height += itemHeight + rowGap + 2 * padding;
			  } else {
			    column2Height += itemHeight + rowGap + 2 * padding;
			  }
			});

			reviewsContainer.style.height = Math.max(column1Height, column2Height) + 'px';


      var tmpScriptDiv = document.createElement('div');
      tmpScriptDiv.innerHTML = window.reviewApp.reviews[i].aggregate_rating;
      let aggregateScript = $(tmpScriptDiv).find('script')
			let reviewsJson = $(aggregateScript).text().trim()
			if (reviewsJson != '') {
				let reviewsData = JSON.parse(reviewsJson)
				reviewCount += Number(reviewsData.reviewCount)
				sumRatings += Number(reviewsData.ratingValue)
			}

      // console.log(window.reviewApp.reviews[i].form);
      var tmpFormDiv = document.createElement('div');
      tmpFormDiv.innerHTML = window.reviewApp.reviews[i].form;
			let form = $(tmpFormDiv).find('.new-review-form')

			if (form.html() != '' && form.html() != undefined && form.html() != 'undefined' && !formLoaded) {
				$('#reviewsFormWrap')
					.find('form')
					.addClass('new-review-form')
					.attr('id', 'new-review-form_8143253733590')
					.attr('method', 'post')
					.attr('action', '//productreviews.shopifycdn.com/api/reviews/create')
					.attr('onsubmit', 'SPR.submitForm(this);return false;')
				let formHtml = `						
	        <input type="hidden" name="review[rating]">
	        <input type="hidden" name="product_id" value="8143253733590">
	        <input id="review_title_8143253733590" class="review-form-title" type="hidden" name="review[title]" value="">
	        <h3 class="spr-form-title">Write a review</h3>
	        <div class="reviews-form-body">
	        	<div class="reviews-form-column">
		        	<div class="reviews-form-field spr-form-contact-name">
		        		${$(form).find('.spr-form-contact-name').html()}
		        	</div>
	        		<div class="reviews-form-field spr-form-contact-email">
	        			${$(form).find('.spr-form-contact-email').html()}
		        	</div>
	        		<div class="reviews-form-field spr-form-review-rating">
	        			${$(form).find('.spr-form-review-rating').html()}
		        	</div>
	        	</div>
	        	<div class="reviews-form-column">
		        	<div class="reviews-form-field spr-form-review-body">
		        		${$(form).find('.spr-form-review-body').html()}
		        	</div>
	        	</div>
	        </div>
	        <div class="reviews-form-actions">
	        	${$(form).find('.spr-form-actions').html()}
	        </div>
				`
				$('#reviewsFormWrap').find('form').html(formHtml)
				$('#reviewsFormWrap').find('form').find('.spr-form-review-body').find('.spr-form-label').text('Review')
				$('#reviewsFormWrap').find('form').find('.reviews-form-actions').find('.spr-button').val('Submit')
				formLoaded = true
			}
    };
    
    let summaryRating = sumRatings / window.reviewApp.reviews.length;
    document.getElementById('totalRatingValue').innerText = Number(summaryRating).toFixed(2);
    let summaryRatingHtml = `
    	<span class="spr-starrating spr-summary-starrating" aria-label="${Number(summaryRating).toFixed(1)} of 5 stars" role="img">
        <i class="spr-icon spr-icon-star" aria-hidden="true"></i><i class="spr-icon spr-icon-star" aria-hidden="true"></i><i class="spr-icon spr-icon-star" aria-hidden="true"></i><i class="spr-icon spr-icon-star" aria-hidden="true"></i><i class="spr-icon spr-icon-star" aria-hidden="true"></i>
      </span>
    `
    document.getElementById('totalRatingStars').insertAdjacentHTML('beforeend', summaryRatingHtml);
		document.getElementById('totalReviewsCount').insertAdjacentHTML('beforeend', `${reviewCount} reviews`);

    let sumMarks = 0
    for (const mark in ratingMarks) {
    	sumMarks += ratingMarks[mark]
    }
	  if (sumMarks == reviewCount) {
      let marksHtml = '';
      for (let m = 5; m >= 1; m--) {
      	let fillPercent = ratingMarks[`mark${m}`] / reviewCount * 100;
      	marksHtml += `
      		<div class="reviews-rating-stats-mark">
      			<div class="reviews-rating-stats-mark-star">
      				<div class="reviews-rating-stats-mark-star-value">${m}</div>
      				<img class="reviews-rating-stats-mark-star-icon" src="{{ 'star-fill.svg' | asset_url }}">
      				<div class="reviews-rating-stats-mark-star-line">
      					<div class="reviews-rating-stats-mark-star-line-fill" style="width: ${fillPercent}%">
      					</div>
      				</div>
      			</div>
      			<div class="reviews-rating-stats-mark-count">${ratingMarks[`mark${m}`]}</div>
      		</div>
      	`;
      }
      document.getElementById('reviewsMarks').insertAdjacentHTML('beforeend', marksHtml);
	  }

	  // console.log(totalData)
	  // showPage(1)
  };
  window.reviewApp.getReviews = function(a) {
    if (typeof a === 'undefined') {
      errLog('missing_id');
      return
    }
    var productId = a.shift();
    var script = document.createElement("script");
    if (document.getElementById('singleReviewData')) {
      document.getElementById('singleReviewData').remove(); /* cleanup (optional) */
    }
    script.id = 'singleReviewData';
    script.async = true;
    script.src = [window.reviewApp.reviewUrl, 'product?callback=reviewLoaded&shop=', window.reviewApp.reviewStore, '&product_id=', productId].join('');
    document.body.appendChild(script);
  };
  reviewApp.getReviews(window.reviewApp.productIdList);

	function showPage(page) {
		$('#multipleReviews').empty();
		$('#pagination').empty();
		for (let reviewHtml of totalData[page]) {
			document.getElementById('multipleReviews').insertAdjacentHTML('beforeend', reviewHtml)
		}
		/*let rws = $($.parseHTML(totalData[page - 1].reviews));
    $(rws).each(function(index) {
    	if ($(this).hasClass('spr-review')) {
				let reviewStars = $(this).find('.spr-starratings').html()
				let reviewAuthor = '', reviewDate = ''
				$(this).find('.spr-review-header-byline').find('strong').each(function(index) {
					if (index == 0) reviewAuthor = $(this).text()
					else if (index == 1) reviewDate = $(this).text()
				})
				let reviewContent = $(this).find('.spr-review-content-body').text()
        let reviewHtml = `
        	<div class="reviews-list-item product-review ${index >= 3 && !expanded ? 'reviews-list-item-hidden' : ''}">
        		<div class="reviews-list-item-top">
        			<div class="reviews-list-item-stars product-review-stars">${reviewStars}</div>
        			<div class="reviews-list-item-date">${reviewDate}</div>
        		</div>
        		<div class="reviews-list-item-text product-review-text">${reviewContent}</div>
        		<div class="reviews-list-item-bottom">
        			<div class="reviews-list-item-author">${reviewAuthor}</div>
        		</div>
        	</div>
        `
        document.getElementById('multipleReviews').insertAdjacentHTML('beforeend', reviewHtml)
      }
    	else if ($(this).hasClass('spr-pagination')) {
    		let pagination = $(this)
				document.getElementById('pagination').insertAdjacentHTML('beforeend', pagination.html())
				$('#pagination').find('.spr-pagination-page:not(.is-active), .spr-pagination-prev, .spr-pagination-next').each(function() {
					$(this).find('a').prop('onclick', null).off('click').removeAttr('onclick')
				})
				const prevPageHtml = `
					<img style="transform: rotate(90deg); transform-origin: center" src="{{ 'chevron-down-blue.svg' | asset_url }}">
					<div class="reviews-page-prev-text">Previous</div>
				`
				$('#pagination').find('.spr-pagination-prev').find('a').html(prevPageHtml)
				const nextPageHtml = `
					<div class="reviews-page-next-text">Next</div>
					<img style="transform: rotate(-90deg); transform-origin: center" src="{{ 'chevron-down-blue.svg' | asset_url }}">
				`
				$('#pagination').find('.spr-pagination-next').find('a').html(nextPageHtml)
				if (!expanded) $('#pagination').addClass('reviews-pagination-hidden')
    	}
    });*/
	}

	$('#showForm').on('click', function() {
		$('.new-review-form').css('display', 'block')
		$('.reviews-form-shadow').css('display', 'flex')
	})
	$('.reviews-form-close').on('click', function() {
		$('.reviews-form-shadow').css('display', 'none')
	})
	
	$(document).on('click', '.spr-form-review-rating a.spr-icon-star', function(e) {
		window.newReviewRating = $(this).data('value')
	})

	$(document).on('click', '.reviews-form-actions .spr-button', function(e) {
		e.preventDefault()
		let form = $(this).parents('.new-review-form')
		let author = $(form).find('.spr-form-contact-name').find('.spr-form-input').val()
		if (author == '') {
			$(form)
				.find('.spr-form-contact-name')
				.find('.spr-form-input')
				.css('border', '1px solid red')
			return
		}
		let email = $(form).find('.spr-form-contact-email').find('.spr-form-input').val()
		if (email == '') {
			$(form)
				.find('.spr-form-contact-email')
				.find('.spr-form-input')
				.css('border', '1px solid red')
			return
		}
		let reviewTitle = 'Review of ' + author
		$(form).find('.review-form-title').val(reviewTitle)
		// $(form).submit()
    let formArray = $(form).serializeArray()
    // let formData = { shop: '8cc6c3.myshopify.com' }
    let formData = { shop: 'teslogic.myshopify.com' }
    for (let item of formArray) {
    	formData[item.name] = item.value
    }

    if (!formData['review[rating]']) {
    	formData['review[rating]'] = window.newReviewRating
    }

    $.ajax({
      type: "POST",
      url: 'https://productreviews.shopifycdn.com/proxy/v4/reviews/create',
      data: formData,
      dataType: "json",
      encode: true,
    }).done(function (data) {
      console.log(data);
      if (data.status == 'success') {
      	$('.reviews-form-shadow').css('display', 'none')
      	alert('Your review was added successfully')
      }
      else {
      	alert('Error adding review')
      }
    });
	})
})();
</script>
